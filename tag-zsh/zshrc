################################################################################
# .zshrc
# Charles Cruz
#
# Notes:
# * Install powerline-status
#   `pip install --user git+git://github.com/powerline/powerline`
#   `pip install --user psutil`
# * Install powerlevel10k
#   `git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \
#      ~/.oh-my-zsh/custom/themes/powerlevel10k`
################################################################################

################################################################################
# Oh My Zsh - Sourced first since it establishes its own aliases
################################################################################
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  >&2 echo "[WARN] Did not detect $HOME/.oh-my-zsh directory! Skipping..."
  return
else
  if [ ! -d "$HOME/.oh-my-zsh/custom/themes/powerlevel10k" ]; then
    >&2 echo "[WARN] Did not detect powerlevel10k theme! Skipping..."
  else
    # Enable Powerlevel10k instant prompt. Should stay close to the top of
    # ~/.zshrc. Initialization code that may require console input (password
    # prompts, [y/n] confirmations, etc.) must go above this block; everything
    # else may go below.
    if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
      source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
    fi

    # Theme
    ZSH_THEME="powerlevel10k/powerlevel10k"
    # POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir virtualenv vcs)

    # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
    [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
  fi

  export ZSH=$HOME/.oh-my-zsh
  export UPDATE_ZSH_DAYS=1

  # Avoid virtualenvs activate command from interfering with Powerlevel9k
  VIRTUAL_ENV_DISABLE_PROMPT=1

  # Case-sensitive completion
  CASE_SENSITIVE="true"

  # Disable auto-setting terminal title
  DISABLE_AUTO_TITLE="true"

  # Display red dots whilst waiting for completion
  COMPLETION_WAITING_DOTS="true"

  # Change the command execution time stamp shown in the history command output
  HIST_STAMPS="yyyy-mm-dd"

  plugins=(git tmux)
  source $ZSH/oh-my-zsh.sh
fi

################################################################################
# General config
################################################################################
export HISTSIZE=100000      # History file size
setopt HIST_IGNORE_DUPS     # Don't record an entry that was just recorded again
setopt HIST_IGNORE_ALL_DUPS # Delete old recorded entry if new one is the same
setopt HIST_SAVE_NO_DUPS    # Don't write duplicate entries in the history file
setopt HIST_IGNORE_SPACE    # Ignore entries that start with a space
setopt SH_WORD_SPLIT        # Bash-like variable expansion
setopt rmstarsilent         # Prevent zsh prompt when doing rm -f
setopt extendedglob         # Use extended glob patterns (for external config)
unsetopt correct_all        # Stop ZSH corrections (because it's not smart)

mkdir -p $HOME/.cache       # Ensure cache directory
export LESSHISTFILE=$HOME/.cache/lesshst                # less history file
export NODE_REPL_HISTORY=$HOME/.cache/node_repl_history # nodejs history file

alias g="git"               # Useful is if using outside of Oh My Zsh
alias t="tmux"
alias nodejs="node"
alias emacs-256color="$(which emacs) -nw"
alias emacs="TERM=xterm-24bits $(which emacs) -nw"
alias vim="vim -v -p"
alias cd..="cd .."
alias mkex="chmod u+x"
alias untar="tar -xzf"
alias grep="grep --color=always"
alias find-str="grep -rIn"
alias inspect="type -a"
alias ls="ls --color -h --group-directories-first"
alias ll="ls --color -alF --group-directories-first"
alias port-bindings="sudo netstat -lntp"
alias doom="~/.emacs.d/bin/doom"

npm () {
  case $1 in
    packages) shift; command npm list --depth 0 "$@" ;;
    *)        command npm "$@" ;;
  esac
}

bb () {
  if [ "$#" -eq 0 ]; then
    command rlwrap bb
  else
    command bb "$@"
  fi
}

hash-check () {
  if [ "$#" -ne 3 ]; then
    >&2 echo "Expected 3 args (hash-check <type> <file> <hash>)"; return
  fi
  local type=$1
  local file=$2
  local this_hash=$3
  local that_hash
  case "$type" in
    md5)    type=md5sum ;;
    sha1)   type=sha1sum ;;
    sha256) type=sha256sum ;;
    *)      >&2 echo "Unexpected type (expected: md5, sha1, sha256)"; return ;;
  esac
  that_hash=$($type $file | cut -f 1 -d ' ')
  if [ "$this_hash" == "$that_hash" ]; then
    echo "Match!"
  else
    echo "Mismatch! \"$this_hash\" != \"$that_hash\""
  fi
}

print-path () {
  echo $PATH | sed -e s/\\:/\\\n/g
}

add-to-path () {
  while [ -n "$1" ]; do
    case ":$PATH:" in
      *":$1:"*) :;;
      *) PATH="$1:$PATH";;
    esac
    shift
  done
}

cfg () {
  case "$1" in
    zshrc|zshrc-*|vimrc)
      vim ~/.$1 ;;
    git)
      vim ~/.config/git/config ;;
    tmux)
      vim ~/.tmux.conf ;;
    *)
      >&2 echo "Unrecongizable config shortcut" ;;
  esac
}

################################################################################
# Os-specific config
################################################################################
case "$(uname -s)" in
  Linux*)
    case "$(cat /etc/os-release | sed -En 's/^NAME="(.+)"$/\1/p')" in
      Ubuntu)
        add-to-path \
          $HOME/bin \
          $HOME/.local/share/npm/bin
        export PATH
        alias install="sudo apt install"
        alias remove="sudo apt remove"
        alias upgrade="sudo apt update && sudo apt -y upgrade"
        alias package="apt list -qq $@"
        ;;
      *) ;;
    esac
    ;;

  Darwin*)
    # homebrew
    add-to-path \
      /usr/local/opt/coreutils/libexec/gnubin \
      /usr/local/opt/ed/libexec/gnubin \
      /usr/local/opt/findutils/libexec/gnubin \
      /usr/local/opt/gnu-indent/libexec/gnubin \
      /usr/local/opt/gnu-tar/libexec/gnubin \
      /usr/local/opt/gnu-sed/libexec/gnubin \
      /usr/local/opt/gnu-which/libexec/gnubin \
      /usr/local/opt/grep/libexec/gnubin \
      /usr/local/opt/rsync/bin \
      /usr/local/sbin
    export PATH
    alias brewski="brew update && brew upgrade"

    # python
    alias py=python3
    alias python=python3
    alias pip=pip3

    add-to-path $HOME/Library/Python/3.*/bin

    # powerline-status
    export POWERLINE_CONFIG_COMMAND=$(ls $HOME/Library/Python/3.*/bin/powerline-config | head -n 1)

    ;;
esac

################################################################################
# Nix
################################################################################
if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
  source $HOME/.nix-profile/etc/profile.d/nix.sh
fi
export NIX_PAGER=cat

nx () {
  local cmd=$1
  case $cmd in
    install)   shift; command nix-env -iA "$@" ;;
    uninstall) shift; command nix-env --uninstall "$@" ;;
    search)    shift; command nix-env -qa --json "$@" ;;
    list)      shift; command nix-env --query ;;
    *)         command nix-env "$@" ;;
  esac
}

################################################################################
# External config (includes files in the format `.zshrc-*`, but excludes those
# with an additional extension like `.zshrc-.bak` via path modifiers)
################################################################################
for f in $HOME/.zshrc-*; do [ -z $f:t:r ] && source $f; done
